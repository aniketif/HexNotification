/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package loginbackend;

import static Message.MessageTable.sendMessage;
import encryption.AdvancedEncryptionStandard;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Aniket
 */
public class messagesender extends javax.swing.JFrame {
    static String sender;
    final String secretKey = "ssshhhhhhhhhhh!!!!";
    String fullPath=null;
    String[] receiverName;
    String[] anotherArray;
    String[] receiverUsername;
    String[] filteredUsername;
    int previousRow=2147483647;
    /**
     * Creates new form messagesender
     */
    public messagesender() {
        
        settree();
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo_1.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {

            public int getSize() { return receiverName.length; }
            public String getElementAt(int i) { return receiverName[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jList1);
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setBackground(new java.awt.Color(0, 90, 171));
        jButton2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginbackend/icons8-logout-rounded-left-100.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Selected Users : ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jEditorPane2.setEditable(false);
        jScrollPane4.setViewportView(jEditorPane2);

        jEditorPane1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        jButton3.setBackground(new java.awt.Color(0, 90, 171));
        jButton3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginbackend/icons8-attach-96.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 90, 171));
        jButton1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginbackend/icons8-email-send-64.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         if(jEditorPane1.getText().isEmpty()){

		jLabel1.setText("Please Enter A Message");
                jLabel1.setForeground(new java.awt.Color(255, 51, 51));
                                             Timer timer = new Timer(2000, e -> jLabel1.setText(""));
                      
timer.setRepeats(false);
timer.start();
}
         else{
         String reciever, message;
         
         reciever = filteredUsername[jList1.getSelectedIndex()];
         message = jEditorPane1.getText();
         sendMessage(AdvancedEncryptionStandard.encrypt(reciever, secretKey), reciever, AdvancedEncryptionStandard.encrypt(sender, secretKey), AdvancedEncryptionStandard.encrypt(message, secretKey), fullPath, "N");
         jEditorPane1.setText("");
         getMessages();
         }
    }//GEN-LAST:event_jButton1ActionPerformed
   
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
              JFileChooser chooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG & GIF Images", "jpg", "gif");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser.getSelectedFile();
        String tempPath = file.getAbsolutePath();
        File pfile = new File(System.getProperty("user.dir")+ "\\source");
        pfile.mkdir();
        System.out.println("You chose to open this file: " +
        chooser.getSelectedFile().getName()+tempPath);
       ProcessBuilder builder = new ProcessBuilder(
            "cmd.exe", "/c", "copy \""+tempPath+"\" \""+System.getProperty("user.dir")+ "\\source\\\"");
       builder.redirectErrorStream(true);
            try {
                Process p = builder.start();
            } catch (IOException ex) {
                Logger.getLogger(messagesender.class.getName()).log(Level.SEVERE, null, ex);
            }
        fullPath=System.getProperty("user.dir")+"\\source\\"+chooser.getSelectedFile().getName();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to sign out ?", "Sign out", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (c == JOptionPane.YES_OPTION) {
            try {
                new login().setVisible(true);
        setVisible(false);
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
       int idx = jList1.getSelectedIndex();
        if (idx != -1)
    {
        jEditorPane2.setText("");
        getMessages();
        jTextArea1.setText(jList1.getSelectedValue());
       System.out.println(filteredUsername[jList1.getSelectedIndex()]);
    }
    }//GEN-LAST:event_jList1ValueChanged

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
       filterUser();
    }//GEN-LAST:event_jTextField1KeyPressed
    public void filterUser(){
        String[] tempReceiver;
        String[] tempReceiverusername;
        tempReceiver=new String[receiverName.length];
        tempReceiverusername=new String[receiverName.length];
       for(int i=0; i< receiverName.length; i++){
           if(receiverName[i].toUpperCase().startsWith(jTextField1.getText().toUpperCase())){
              tempReceiver[i]=receiverName[i];
              tempReceiverusername[i] = receiverUsername[i];
               
           }
           else
           {
               tempReceiverusername[i] = null;
               tempReceiver[i]=null;
           }
}
       for(int s=0;s<tempReceiver.length-1;s++)
                {
                    for(int m=s + 1;m<tempReceiver.length;m++)
                    {

                        if(tempReceiver[s] != null && tempReceiver[s].equals(tempReceiver[m]))
                        {
                            // array = ArrayUtils.removeElement(array, array[s]); --m;??
                             tempReceiver[m] = null; // Mark for deletion later on
                             tempReceiverusername[m] = null;
                        }
                    } 
                }
            int count=0;
                for(int s=0;s<tempReceiver.length;s++)
                {
                    if(tempReceiver[s] == null)
                    {
                    // array = ArrayUtils.removeElement(array, array[s]); --m;??
                        count++; // Mark for deletion later on
                    }
                   
                }
                String[] finalReceiver;
                finalReceiver = new String[tempReceiver.length - count];
                filteredUsername = new String[tempReceiver.length - count];
                int added=0;
                for (int i = 0; i < tempReceiver.length; i++) {
                 
                    if(tempReceiver[i]==null){
                     continue;
                    }
                    else
                    {
                        finalReceiver[added]=tempReceiver[i];
                        filteredUsername[added]=tempReceiverusername[i];
                        added++;
                    }  
                }
       
       jList1.setModel(new javax.swing.AbstractListModel<String>() {

              public int getSize() { return finalReceiver.length; }
    public String getElementAt(int i) { return finalReceiver[i]; }
});
        }
    
    public void getMessages(){
          int idx = jList1.getSelectedIndex();
        if (idx != -1)
    {
        int numberofmessage;
        String[] messagesArray;
        String location = "jdbc:sqlite:"+ System.getProperty("user.dir")+ "\\DataBase\\"+filteredUsername[jList1.getSelectedIndex()]+".db";
        String numberofmessages_sql = "SELECT COUNT(*) FROM "+filteredUsername[jList1.getSelectedIndex()]+" WHERE `sendername` = ?";
        String getmessages_sql = "SELECT `message`, `image` FROM "+filteredUsername[jList1.getSelectedIndex()]+" WHERE `sendername` = ?";
        try{  
            try (Connection conn = DriverManager.getConnection(location)) {
                PreparedStatement stmt = conn.prepareStatement(numberofmessages_sql);
                stmt.setString(1, AdvancedEncryptionStandard.encrypt(sender,secretKey));
                ResultSet rs  = stmt.executeQuery();
                numberofmessage = Integer.parseInt(rs.getString(1));
                messagesArray = new String[numberofmessage];
                PreparedStatement gstmt = conn.prepareStatement(getmessages_sql);
                gstmt.setString(1, AdvancedEncryptionStandard.encrypt(sender,secretKey));
                ResultSet grs  = gstmt.executeQuery();
                
                for (int i = 0; i < numberofmessage; i++) 
                {
                   grs.next();
                   if(grs.getString(2)==null){
                   messagesArray[i] = "<table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td bgcolor='#4287f5'><h1 style=\"color:white;\">"+AdvancedEncryptionStandard.decrypt(grs.getString(1), secretKey)+"</h><p></td></tr></table>";
                }
                else
                   {
                       messagesArray[i] = "<table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td bgcolor='#4287f5'><h1 style=\"color:white;\">"+AdvancedEncryptionStandard.decrypt(grs.getString(1), secretKey)+"</h><p><img width=\"1000\" height=\"100%\" border=\"0\" src=\"file:///"+grs.getString(2)+"\" alt=\"Image not found\"></td></tr></table>";
                   }
                   
                }
                jEditorPane2.setContentType("text/html");
            
                String messages = "";
                for (String element: messagesArray) {
                   
                   messages = messages + element +"<br>";
                   jEditorPane2.setText(messages);
                         
        }
               
        conn.close();
            }
            
            
            
        }
        catch (SQLException e) {  
            JOptionPane.showMessageDialog(null,e.getMessage());  
        }
    }
    }
    
    public static void getSenderName(String getname){
        sender = getname;
    }
public void settree(){
        //javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Employee");
        //javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Indexing");
        //javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode();
                   
        int numberofusers;
        String[] tempUsers;
        String location = "jdbc:sqlite:"+ System.getProperty("user.dir")+ "\\DataBase\\HexaDB.db";
        String numberofmessages_sql = "SELECT COUNT(*) FROM employees";
        String getsendernames_sql = "SELECT `username`, `firstname`, `lastname` FROM employees";
        try{  
            try (Connection conn = DriverManager.getConnection(location)) {
                PreparedStatement stmt = conn.prepareStatement(numberofmessages_sql);
                ResultSet rs  = stmt.executeQuery();
                numberofusers = Integer.parseInt(rs.getString(1));
                receiverName = new String[numberofusers];
                receiverUsername = new String[numberofusers];
                filteredUsername = new String[numberofusers];
                tempUsers = new String[numberofusers];
                PreparedStatement gstmt = conn.prepareStatement(getsendernames_sql);
                ResultSet grs  = gstmt.executeQuery();
                
                for (int i = 0; i < numberofusers; i++) 
                {
                   grs.next();
                   tempUsers[i] = AdvancedEncryptionStandard.decrypt(grs.getString(2), secretKey)+" "+AdvancedEncryptionStandard.decrypt(grs.getString(3), secretKey);
                   receiverName[i] = AdvancedEncryptionStandard.decrypt(grs.getString(2), secretKey)+" "+AdvancedEncryptionStandard.decrypt(grs.getString(3), secretKey);
                   receiverUsername[i] = AdvancedEncryptionStandard.decrypt(grs.getString(1), secretKey);
                   filteredUsername[i] = AdvancedEncryptionStandard.decrypt(grs.getString(1), secretKey);
          //         treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(tempUsers[i]);
            //       treeNode2.add(treeNode3);
                   
                }
              //  treeNode1.add(treeNode2);
                conn.close();
            } 
            
        }
          
        catch (SQLException e) {  
            JOptionPane.showMessageDialog(null,e.getMessage());  
        } 
      // jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
//       jScrollPane3.setViewportView(jTree1);
       
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
